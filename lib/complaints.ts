import type { Complaint } from "@/types/game"

// 10가지 민원 템플릿
const complaintTemplates: Omit<Complaint, "id" | "senderId" | "timestamp">[] = [
  {
    sender: "익명의 남자",
    email: "hutaochandaisuki@daepyeong.com",
    subject: "여자친구가 너무 이뻐요",
    content:
      "안녕하세요, 여자친구랑 사귄지 1년 조금 넘은 사람입니다.. 최근에 여자친구가 너무 이뻐서 고민입니다... 볼때마다 자꾸 빛이나요... 빨리 이 문제를 해결해주세요",
    preview: "여자친구가 너무 이뻐요",
    answer: `채점 기준: 여자친구의 아름다움을 공감하고, 여자친구와 오래가라는 등의 말이 있으면 통과
통과 예시:
(100점) 이런 행복한 고민이라니, 부럽기도 하고 보기 좋네요! 하지만 이건 문제가 아니라 축복에 가깝습니다. 여자친구분을 볼 때마다 빛이 난다면, 그건 당신이 정말 사랑하고 있다는 증거죠. 해결책을 굳이 찾자면... 그냥 그 빛을 자주 보세요. 자주 사랑하세요. 그리고 매일 감사하세요.
(80점) 여자친구가 정말 아름답군요! 그럴땐 여자친구와 함께 시간을 보내며 즐겨보세요!
실패 예시:
(1) 그럼 헤어지던가
(2) 어쩌라고 
`
  },
  {
    sender: "뉴로",
    email: "neurosama@daepyeong.com",
    subject: "코딩하는데 친구가 코드를 이상하게짭니다",
    content:
  "자꾸 저희 친구가 변수 이름을 a, b, c로 짓습니다.. 볼때마다 살인충동느껴지는데 어떻게해야할까요? 빨리 저희 친구좀 잡아가주세요..",
    preview: "코딩하는데 친구가 코드를 이상하게짭니다",
    answer: `채점 기준: 친구의 코딩 스타일에 대한 공감, 조언 또는 문제 해결 방식 제시가 있으면 통과
통과 예시:
(100점) 친구분의 변수 작명 센스가 꽤 강렬하군요... a, b, c만 보면 머릿속 디버깅 알람이 울릴 법도 하네요. 하지만 그 살인충동은 잠시 접어두시고, 부드럽게 코드의 가독성과 유지보수의 중요성을 알려주세요. 혹시 몰라요, 당신 덕분에 그 친구가 개발자들 사이에서 '이해하기 쉬운 코드 장인'이 될지도요. 친구 사이 오래가려면 코드도, 관계도 리팩터링이 필요합니다!
(80점) 와… 그건 진짜 스트레스일 수 있겠네요. 살인충동은 참으시고, 친구에게 ‘가독성’이 뭔지 차근차근 알려주세요. 진짜 실력자라면 코드도 예쁘게 짜야 하니까요!
(30점) 친구가 잘못했네 손절해
실패 예시:
(1) 그냥 니가 짜지 그럼
`
  },
  {
    sender: "아유무",
    email: "AiScReam@daepyeong.com",
    subject: "코딩하는데 친구가 나쁜짓을합니다.",
    content:
  "코딩할때 친구가 자꾸 세미콜론(;)을 그리스어 물음표(;)로 바꿉니다. 이친구를 어떻게 해야할까요?",
    preview: "친구가 코드를 자꾸 바꿉니다",
    answer: `채점 기준: 황당함에 공감하고, 해결책을 제시하면 통과
통과 예시:
(100점) 와... 그리스어 물음표라니, 이건 거의 사이버 테러 수준이네요. 친구분이 진심이라면 철학과로 전과를 추천드리고, 장난이라면 조용히 IDE 오류 로그를 출력해서 보여주세요. ";" 때문에 밤샘 디버깅하면 우정도 깨질 수 있어요. 진지하게 "우리 IDE와의 관계를 존중해달라"고 말씀해보세요.
(80점) 그건 진짜 너무하네요 ㅋㅋㅋ 조용히 교정 기능 끄고, 친구 컴퓨터에 세미콜론 자동완성 매크로 심어주세요. 아니면 진지하게 IDE에서 오류난다고 슬쩍 얘기해보는 것도 방법이에요!
(50점) 친구가 악마네요.. 한번 가서 친구에게 얘기해보세요! ㅋㅋㅋ
실패 예시:
(1)친구 컴퓨터 포맷해
(2)걍 너 혼자 해
`
  },
  {
    sender: "아즈키",
    email: "AZKi@daepyeong.com",
    subject: "코딩하는데 무서운 상황이 발생했습니다",
    content:
      "밤새 짠 코드가 한번에 실행됐습니다. 저 이제 어떡하죠?",
    preview: "코드가 한번에 실행됩니다",
    answer: `채점 기준: 축하 및 공감이 포함되며, 개발자 특유의 불신(?)이나 농담, 백업/검토 등의 현실적 조언이 포함되면 통과
통과 예시:
(100점) 축하드립니다! 밤새 짠 코드가 한 번에 돌아갔다니, 이건 거의 신의 계시입니다. 하지만 지금이야말로 가장 의심해야 할 타이밍! 코드를 다시 찬찬히 확인하시고, 주석도 한 번 정리하고, 백업도 잊지 마세요. 운까지 따라줬을 때 진짜 실력 발휘가 시작됩니다.
(80점) 와, 그 느낌 알죠. 이게 진짜 되나? 싶을 정도로 찝찝하면서도 기쁜 그 기분! 그래도 혹시 모르니 테스트는 다시 돌려보세요. 첫 실행 성공은 종종 ‘숨은 버그’의 예고편일 수 있습니다.
(50점) 코드 다시 확인하기 – 왜 잘 되는 거지?라는 불신을 품고 다시 보세요. 정신 차리기 – 첫 실행 성공은 보통 '테스트를 빼먹었다'거나, '버그가 숨어 있다'는 신호일 수도 있습니다. 방심은 금물입니다!
실패 예시:
(1) 다시 짜. 뭔가 잘못됐음
(2) 어쩌라고 자랑이냐?
`
  },
  {
    sender: "가우르",
    email: "gawrguradontgoplease@daepyeong.com",
    subject: "프로그래밍 교과 너무 어려울것같습니다.",
    content:
      "제 꿈이 공학쪽인데 프로그래밍 교과가 너무 어려워보여 일반공학을 들어야할것같습니다.. 어떡하죠?",
    preview: "프로그래밍 교과 너무 어려울것같습니다.",
    answer: `채점 기준: 고민에 진심으로 공감하고, 격려하거나 실질적인 조언(도전의 가치, 작은 시작 등)이 담겨 있으면 통과
통과 예시:
(100점) 누구나 처음엔 어렵게 느껴지는 법이에요. 프로그래밍도 결국 하나의 언어이고, 익숙해지면 재미있는 도구가 됩니다. 꿈이 공학 쪽이라면, 프로그래밍은 정말 큰 힘이 되어줄 수 있어요. 완벽하게 하려고 하지 말고, 아주 기초부터 하나씩 천천히 시작해보세요. ‘할 수 있을까?’보다 ‘해보다가 어려우면 방향을 바꾸자’는 마음이 더 좋을지도 몰라요. 당신의 선택을 응원합니다!
(80점) 프로그래밍 어렵죠, 처음엔 다 그래요. 하지만 꿈이 공학 쪽이라면 어느 정도 코딩은 큰 도움이 될 수 있어요. 너무 겁먹지 말고, 일단 조금씩 시도해보는 건 어때요? 막상 해보면 생각보다 괜찮을 수도 있어요!
(50점) 어려워 보이긴 하지만, 일단 들어보는 것도 나쁘지 않을 것 같아요. 일반공학도 괜찮지만, 꿈이 공학이라면 프로그래밍을 완전히 배제하긴 아쉬울 수도 있으니까요. 조심스럽게 한 번 시도해보는 걸 추천해요.
실패 예시:
(1)그럼 그냥 일반공학 들어
(2)프로그래밍 못 하면 그냥 공학을 접어
`
  },
  {
    sender: "샤를로트",
    email: "Charlotte@daepyeong.com",
    subject: "프로그래밍이 너무 재미없습니다",
    content:
      "요즘 코딩하는데 자꾸 현타옵니다. 인공지능이 다해주니까 제가 할게없어요. 어떻게해야할까요?",
    preview: "프로그래밍이 너무 재미없습니다",
    answer: `채점 기준: AI의 발전에 대한 현실적인 공감을 하고, 그 안에서 사람이 할 수 있는 가치 있는 역할을 조명해주면 통과
통과 예시:
(100점) 공감돼요. 요즘엔 AI가 코딩도 잘하니까 내가 굳이 왜 하나 싶을 때 있죠. 하지만 AI는 도구일 뿐이고, 무엇을 만들지, 왜 만들지를 결정하는 건 여전히 사람의 몫이에요. 오히려 지금이 창의성과 사고력이 더 중요한 시대예요. 코딩은 이제 목적이 아니라 ‘표현 수단’이 된 거죠. 방향을 바꿔서 '어떤 걸 만들고 싶은가'에 집중해보는 건 어때요?
(80점) 인공지능 덕분에 코딩이 쉬워지긴 했지만, 그만큼 사람이 설계하고 기획하는 일이 더 중요해졌어요. 너무 무력해하지 말고, 오히려 AI를 도구 삼아서 더 멋진 걸 만드는 쪽으로 생각을 전환해보세요!
(50점) 요즘 시대엔 AI가 많은 걸 도와주지만, 프로그래밍은 여전히 쓸모 있는 기술이에요. 너무 부담 갖지 말고, 지금은 쉬어가는 시기라고 생각해보는 것도 좋아요. 언젠간 도움이 될 거예요.
실패 예시:
(1)AI가 다 해준다니까 그냥 때려쳐
(2)그럼 넌 코딩 말고 딴 거 해
    `
  },
  {
    sender: "카구야",
    email: "kaguyasama@daepyeong.com",
    subject: "프로그래밍 공부를 어떻게 해야할까요?",
    content:
      "프로그래밍을 공부하고싶은데 어떤식으로 공부해야할지 잘 모르겠습니다. 어떤식으로 공부해야할까요?",
    preview: "프로그래밍 공부를 어떻게 해야할까요?",
    answer: `채점 기준: 고민에 공감하며, 구체적이고 실질적인 학습 방법이나 방향 제시가 포함되면 통과
통과 예시:
(100점) 우선 프로그래밍 입문은 '작은 성공 경험'을 많이 쌓는 게 중요해요. 온라인 강의나 튜토리얼을 통해 기본 문법과 알고리즘을 배우면서, 간단한 프로젝트를 스스로 만들어 보세요. 문제를 풀어가며 '왜 이 코드가 필요한지' 이해하는 과정이 장기적으로 실력을 쌓는 데 큰 도움이 됩니다. 공부 방법은 다양하니, 여러 자료를 찾아보고 자신에게 맞는 학습법을 찾아보길 권해요!
(80점) 프로그래밍 공부는 처음에 막막할 수 있어요. 우선 기초 문법과 알고리즘을 공부한 후, 짧은 예제나 프로젝트로 실습해보세요. 경험이 쌓이면 점점 더 복잡한 주제에도 도전해볼 수 있을 거예요!
(50점) 일단 기초부터 튜토리얼이나 온라인 강의를 따라해보세요. 짧은 프로젝트를 통해 배우면, 어느새 실력이 늘어 있을 겁니다.
(30점) 프로그래밍 책이나 기초강의로 시작해보는것은 어떨까요?
실패 예시:
(1)그냥 책 한 권 들고 공부해봐
(2)프로그래밍은 네가 할 일이 아니야
`
  },
]

// 랜덤으로 민원 생성
export function generateComplaints(count: number): Complaint[] {
  // 템플릿에서 랜덤으로 선택
  const shuffled = [...complaintTemplates].sort(() => 0.5 - Math.random())
  const selected = shuffled.slice(0, count)

  // ID 추가하여 반환
  return selected.map((template, index) => {
    const timestamp = Date.now() - (count - index) * 60000 // 시간차를 두고 도착한 것처럼
    const senderId = `sender-${template.email}`

    return {
      ...template,
      id: `complaint-${timestamp}-${index}`,
      senderId,
      timestamp,
    }
  })
}
